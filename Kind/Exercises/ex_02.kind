// type PairBool
// Contains 2 Booleans inside it
type PairBool {
  new(fst: Bool, snd: Bool)
}

// Returns the first element of a pair
fst(pair: PairBool): Bool
  case pair {
    new: pair.fst
  }

// Returns the second element of a pair
snd(pair: PairBool): Bool
  pair@snd

// Returns true if both elements of a PairBool are identical
eql_elements(pair: PairBool): Bool
  case pair@fst pair@snd {
    true true: Bool.true
    false false: Bool.true
  } default Bool.false

// Returns true if both Pairs are equal
// eql(PairBool.new(false, false), PairBool.new(true, true)) -> false
// eql(PairBool.new(true, false), PairBool.new(true, false)) -> true
eql(a: PairBool, b: PairBool): Bool
  case a@fst b@fst {
    true false: Bool.false
    false true: Bool.false
  } default case a@snd b@snd {
    true false: Bool.false
    false true: Bool.false
  } default Bool.true

// Returns true if both Pairs are different
// not_eql(PairBool.new(false, false), PairBool.new(true, true)) -> true
// not_eql(PairBool.new(true, false), PairBool.new(true, false)) -> false
not_eql(a: PairBool, b: PairBool): Bool
  case a@fst b@fst {
    true false: Bool.true
    false true: Bool.true
  } default case a@snd b@snd {
    true false: Bool.true
    false true: Bool.true
  } default Bool.false

// Creates a PairBool from 2 Booleans
create(a: Bool, b: Bool): PairBool
  PairBool.new(a, b)

// Inverts the values of a PairBool
// neg(PairBool.new(false, false)) -> PairBool.new(true, true)
// neg(PairBool.new(false, true)) -> PairBool.new(true, false)
neg(pair: PairBool): PairBool
  case pair@fst pair@snd {
    true true: PairBool.new(Bool.false, Bool.false)
    false false: PairBool.new(Bool.true, Bool.true)
    true false: PairBool.new(Bool.false, Bool.true)
    false true: PairBool.new(Bool.true, Bool.false)
  }

// Inverts the 2 elements of a PairBool
swap(pair: PairBool): PairBool
  PairBool.new(pair@snd, pair@fst)

ex_02: IO<Unit>
  IO {
    Tests._02.fst(fst)
    Tests._02.snd(snd)
    Tests._02.eql_elements(eql_elements)
    Tests._02.eql(eql)
    Tests._02.not_eql(not_eql)
    Tests._02.create(create)
    Tests._02.neg(neg)
    Tests._02.swap(swap)
  }
