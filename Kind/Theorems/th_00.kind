// Theorems involving

///Natural numbers
Nat.divides(a: Nat, b: Nat): Type
  ?Nat.divides

Nat.sub.succ_both(a: Nat, b: Nat): Nat.sub(Nat.succ(a), Nat.succ(b)) == Nat.sub(a, b)
  ?Nat.sub.succ_both

Nat.sub.zero_left(a: Nat): Nat.sub(0, a) == 0
  ?Nat.sub.zero_left

Nat.mod.mod_one_equals_zero(a: Nat): (a % 1) == 0
  ?Nat.mod.mod_one_equals_zero

Nat.mod.zero_mod_equals_zero(a: Nat): (0 % Nat.succ(a)) == 0
  ?Nat.mod.zero_mod_equals_zero

Nat.mod.go_self(a: Nat) (b: Nat): Nat.mod.go(a, a, Nat.succ(b)) == 0
  ?Nat.mod.go_self

Nat.mod.go_mod_one_equals_zero(a: Nat): Nat.mod.go(a, 1, 0) == 0
  ?Nat.mod.go_mod_one_equals_zero

Nat.mod.self(a: Nat): (Nat.succ(a) % Nat.succ(a)) == 0
  ?Nat.mod.self

Nat.succ_inj(a: Nat, b: Nat, eq: Nat.succ(a) == Nat.succ(b)): a == b
  ?Nat.succ_inj

Nat.min.small_left(a: Nat, b: Nat): (Nat.min(a, b) <=? a) == true
  ?Nat.min.small_left

Nat.min.small_right(a: Nat, b: Nat): (Nat.min(a, b) <=? b) == true
  ?Nat.min.small_right

Nat.min.small(
  a: Nat
  b: Nat
): And<(Nat.min(a, b) <=? a) == true, (Nat.min(a, b) <=? b) == true>
  ?Nat.min.small

Nat.gcd.self(a: Nat): Nat.gcd(a,a) == a
  ?Nat.gcd.self

Nat.gcd.succ(a: Nat)(b: Nat): Nat.gcd(Nat.succ(a),b) == Nat.gcd(Nat.mod(b, Nat.succ(a)), Nat.succ(a))
  ?Nat.gcd.succ

Nat.gcd.zero_right(a: Nat): Nat.gcd(a,0) == a
  ?Nat.gcd.zero_right

Nat.gcd.zero_left(a: Nat): Nat.gcd(0,a) == a
  ?Nat.gcd.zero_left

Nat.lte.zero_right(n: Nat, Hyp: Nat.lte(n, 0) == true): n == 0
  ?Nat.lte.zero_right

Nat.add.succ_right(a: Nat, b: Nat): (a + Nat.succ(b)) == Nat.succ(Nat.add(a,b))
  ?Nat.add.succ_right

Nat.add.cancel_left(a: Nat, b: Nat, c: Nat, e0: (a + b) == a + c): b == c
  ?Nat.add.cancel_left

Nat.add.comm(a: Nat, b:Nat): (a + b) == (b + a)
  ?Nat.add.comm

Nat.add.zero_right(a: Nat): (a + 0) == a
  ?Nat.add.zero_right

Nat.add.cancel_right(a: Nat, b: Nat, c: Nat, h: (a + b) == c + b): a == c
  ?Nat.add.cancel_right

Nat.add.zero_left(a: Nat): (0 + a) == a
  ?Nat.add.zero_left

Nat.add.assoc(
  a: Nat
  b: Nat
  c: Nat
): ((a + b) + c) == a + (b + c)
  ?Nat.add.assoc

Nat.mul.one_right(a: Nat): (a * 1) == a
  ?Nat.mul.one_right

Nat.mul.distrib_left(
  a: Nat
  b: Nat
  c: Nat
): (a * (b + c)) == ((a * b) + (a * c))
  ?Nat.mul.distrib_left

Nat.mul.one_left(a: Nat): (1 * a) == a
  ?Nat.mul.one_left

Nat.mul.succ_right(a: Nat, b: Nat): (a * Nat.succ(b)) == a + (a * b)
  ?Nat.mul.succ_right

Nat.mul.comm(a: Nat, b: Nat): (a * b) == b * a
  ?Nat.mul.comm

Nat.mul.succ_left(a: Nat, b: Nat): (Nat.succ(a) * b) == b + (a * b)
  ?Nat.mul.succ_left

Nat.mul.zero_right(a: Nat): (a * 0) == 0
  ?Nat.mul.zero_right

Nat.mul.zero_left(a: Nat): (0 * a) == 0
  ?Nat.mul.zero_left

Nat.mul.assoc(a: Nat, b: Nat, c: Nat): (a * b * c) == (a * b) * c
  ?Nat.mul.assoc

