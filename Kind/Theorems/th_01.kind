//Lists

//Most of these aren't in base yet, please send us a PR if you solve one of them.

// by the way List.concat!(l0,  l1) is the same as l0 ++ l1
List.length.concat<A: Type>(
  l0: List<A>
  l1: List<A>
): List.length!(List.concat!(l0, l1)) = List.length!(l0) + List.length!(l1)
  ?List.concat.length

List.length.concat.comm<A: Type>(
  l0: List<A>
  l1: List<A>
): List.length!(l0 ++ l1) == List.length!(l1 ++ l0)
  ?List.length.concat.comm

// note that kind associates to the right by default
// and has no operator precedence.
List.concat.assoc<A: Type>(
  l0: List<A>
  l1: List<A>
  l2: List<A>
): ((l0 ++ l1) ++ l2) == l0 ++ l1 ++ l2
  ?List.concat.assoc

List.concat.not_comm: Not(
  <A: Type> -> (l0: List<Bool>, l1: List<Bool>) -> l0 ++ l1 == l1 ++ l0
)
  ?List.concat.not_comm

// it's possible to have commutative concatenation.
// (that's a sigma, it works like an existential quantifier)
List.concat.could_comm: [A: Type] (l0: List<A>, l1: List<A>) -> l0 ++ l1 == l1 ++ l0
  ?List.concat.could_comm

// non-tail recursive definitions are easier to reason about.
// try this definition first instead of the one in base.
List.easy_reverse<A: Type>(
  l0: List<A>
): List<A>
  case l0 {
    nil: []
    cons: List.easy_reverse!(l0.tail) ++ [l0.head]
  }

List.length.reverse<A: Type>(
  l0: List<A>
): List.length!(l0) == List.length!(List.reverse!(l0))
  ?List.reverse.length

List.reverse.involutive<A: Type>(
  l0: List<A> 
): List.reverse!(List.reverse!(l0)) == l0
  ?List.reverse.involutive

List.reverse.concat<A: Type>(
  l0: List<A>
  l1: List<A>
): List.reverse!(l1) ++ List.reverse!(l0) == List.reverse!(l0 ++ l1) 
  ?List.reverse.cat_comm

List.length.map<A: Type, B: Type>(
  f: A -> B
  l0: List<A>
): List.length!(List.map!!(f, l0)) == List.length!(l0)
  ?List.length.map

List.map.concat<A: Type, B: Type>(
  f: A -> B
  l0: List<A>
  l1: List<A>
): List.map!!(f, l0) ++ List.map!!(f, l1) == List.map!!(f, l0 ++ l1)
  ?List.map.concat

List.map.comp<A: Type, B: Type, C: Type>(
  f: A -> B
  g: B -> C
  l0: List<A>
): List.map!!(g, List.map!!(f, l0)) == List.map!!((x) g(f(x)), l0)
  ?List.map.comp

List.concat.take_drop<A: Type>(
  n: Nat
  l0: List<A>
): List.take!(n, l0) ++ List.drop!(n, l0) == l0
  ?List.concat.take_drop

List.length.filter<A: Type>(
  f: A -> Bool
  l0: List<A>
): List.length!(List.filter!(f, l0)) <=? List.length!(l0)
  ?List.length.filter